{"version":3,"sources":["components/Tool.jsx","lib/util.js","App.js","lib/init.js","index.js"],"names":["Option","Select","Item","Form","initialValues","framework","nodeNumber","edgeNumber","Tool","props","time","loading","initGraph","changeGraph","className","onFinish","gutter","span","label","name","placeholder","value","type","shape","htmlType","createRandomPosition","x","y","Math","ceil","random","createRandomLFNode","width","height","nodes","id","position","node","toString","push","createRandomLFEdge","nodeNumner","edges","i","edge","sourceNodeId","targetNodeId","createRandomX6Node","createRandomX6Edge","source","target","App","useState","setTime","container","document","getElementById","lastChild","removeChild","graph","createElement","append","startTimeStamp","Date","getTime","renderData","clientWidth","clientHeight","LogicFlow","tool","control","stopScrollGraph","stopZoomGraph","render","initLogicFlow","Graph","fromJSON","initX6","setTimeout","endTimeStamp","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.88178649.chunk.js","sourcesContent":["import React from \"react\";\nimport { Row, Col, Select, Form, Input, Button } from \"antd\";\n\nconst { Option } = Select;\nconst { Item } = Form;\n\nconst initialValues = {\n  framework: \"\",\n  nodeNumber: 0,\n  edgeNumber: 0\n};\n\nexport default function Tool(props) {\n  const { time, loading, initGraph, changeGraph } = props;\n\n  function handleInit({ framework, nodeNumber, edgeNumber }) {\n    initGraph(framework, nodeNumber, edgeNumber);\n  }\n\n  return (\n    <Form className=\"tool\" initialValues={initialValues} onFinish={handleInit}>\n      <Row gutter={10} className=\"tool-row\">\n        <Col span={6} className=\"tool-column\">\n          <Item label=\"框架：\" name=\"framework\" className=\"tool-item\">\n            <Select className=\"select\" placeholder=\"选择一个框架\">\n              <Option value=\"logicflow\">Logic Flow</Option>\n              <Option value=\"x6\">X6</Option>\n            </Select>\n          </Item>\n          <Item label=\"节点数量：\" name=\"nodeNumber\" className=\"tool-item\">\n            <Input type=\"number\" />\n          </Item>\n          <Item label=\"连线数量：\" name=\"edgeNumber\" className=\"tool-item\">\n            <Input type=\"number\" />\n          </Item>\n        </Col>\n        <Col span={6} className=\"tool-column\">\n          <Button\n            type=\"primary\"\n            shape=\"round\"\n            htmlType=\"submit\"\n            loading={loading}\n          >\n            初始化渲染\n          </Button>\n        </Col>\n        <Col span={6} className=\"tool-column\"></Col>\n        <Col span={6} className=\"tool-column\">\n          <div>渲染时间：{time} ms</div>\n        </Col>\n      </Row>\n    </Form>\n  );\n}\n","function createRandomPosition(x, y) {\n  const x1 = Math.ceil(Math.random() * x);\n  const y1 = Math.ceil(Math.random() * y);\n  return [x1, y1];\n}\n\n/**\n * 随机创建指定数量的节点(LogicFlow)\n * @param {number} nodeNumber - 节点数量\n * @param {number} width - 画布宽度\n * @param {number} height - 画布高度\n */\nfunction createRandomLFNode(nodeNumber, width, height) {\n  const nodes = [];\n  for (let id = 1; id <= nodeNumber; id++) {\n    const position = createRandomPosition(width, height);\n    const node = {\n      id: id.toString(),\n      type: \"rect\",\n      x: position[0],\n      y: position[1]\n    };\n    nodes.push(node);\n  }\n  return nodes;\n}\n\n/**\n * 随机创建指定数量的连线(LogicFlow)\n * @param {number} edgeNumber - 连线数量\n * @param {number} nodeNumner - 节点数量\n */\nfunction createRandomLFEdge(edgeNumber, nodeNumner) {\n  const edges = [];\n  for (let i = 0; i < edgeNumber; i++) {\n    const sourceNodeId = Math.ceil(Math.random() * nodeNumner).toString();\n    const targetNodeId = Math.ceil(Math.random() * nodeNumner).toString();\n    const edge = {\n      type: \"line\",\n      sourceNodeId,\n      targetNodeId\n    };\n    edges.push(edge);\n  }\n  return edges;\n}\n\n/**\n * 随机创建指定数量的节点(X6)\n * @param {number} nodeNumber\n * @param {number} width - 画布宽度\n * @param {number} height - 画布高度\n */\nfunction createRandomX6Node(nodeNumber, width, height) {\n  const nodes = [];\n  for (let id = 1; id <= nodeNumber; id++) {\n    const position = createRandomPosition(width, height);\n    const node = {\n      id: id.toString(),\n      shape: \"rect\",\n      width: 100,\n      height: 80,\n      x: position[0],\n      y: position[1]\n    };\n    nodes.push(node);\n  }\n  return nodes;\n}\n\n/**\n * 随机创建指定数量的连线(X6)\n * @param {number} edgeNumber - 连线数量\n * @param {number} nodeNumner - 节点数量\n */\nfunction createRandomX6Edge(edgeNumber, nodeNumner) {\n  const edges = [];\n  for (let i = 0; i < edgeNumber; i++) {\n    const sourceNodeId = Math.ceil(Math.random() * nodeNumner).toString();\n    const targetNodeId = Math.ceil(Math.random() * nodeNumner).toString();\n    const edge = {\n      shape: \"edge\",\n      source: sourceNodeId,\n      target: targetNodeId\n    };\n    edges.push(edge);\n  }\n  return edges;\n}\n\nexport {\n  createRandomLFNode,\n  createRandomLFEdge,\n  createRandomX6Node,\n  createRandomX6Edge\n};\n","import { useState } from \"react\";\nimport Tool from \"./components/Tool\";\nimport { initLogicFlow, initX6 } from \"./lib/init\";\nimport \"./App.css\";\nimport \"./components/style.css\";\nimport \"antd/dist/antd.css\";\nimport \"@logicflow/core/dist/style/index.css\";\n\nfunction App() {\n  const [time, setTime] = useState(0);\n  const [loading, setLoading] = useState(false);\n\n  /**\n   * 初始化画布\n   * @param {string} framework - 所选框架\n   * @param {number} nodeNumber - 节点数量\n   * @param {number} edgeNumber - 连线数量\n   */\n  function initGraph(framework, nodeNumber, edgeNumber) {\n    const container = document.getElementById(\"container\");\n    if (container.lastChild) {\n      container.removeChild(container.lastChild);\n    }\n    const graph = document.createElement(\"div\");\n    graph.id = \"graph\";\n    container.append(graph);\n    // 开始计时\n    const startTimeStamp = new Date().getTime();\n    // 初始化\n    switch (framework) {\n      case \"logicflow\":\n        initLogicFlow(graph, nodeNumber, edgeNumber);\n        break;\n      case \"x6\":\n        initX6(graph, nodeNumber, edgeNumber);\n        break;\n      default:\n        break;\n    }\n    // 在渲染完成后的下一次事件循环中结束计时\n    setTimeout(() => {\n      const endTimeStamp = new Date().getTime();\n      const diff = endTimeStamp - startTimeStamp;\n      setTime(diff);\n    }, 0);\n  }\n\n  function changeGraph() {}\n\n  return (\n    <div className=\"App\">\n      <div id=\"container\" className=\"container\"></div>\n      <Tool\n        time={time}\n        loading={loading}\n        initGraph={initGraph}\n        changeGraph={changeGraph}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","import LogicFlow from \"@logicflow/core\";\nimport { Graph } from \"@antv/x6\";\nimport {\n  createRandomLFNode,\n  createRandomLFEdge,\n  createRandomX6Node,\n  createRandomX6Edge\n} from \"./util\";\n\n/**\n * 初始化LogicFlow画布\n * @param {HTMLElement} container - 画布的DOM容器\n * @param {number} nodeNumber - 节点数量\n * @param {number} edgeNumber - 连线数量\n */\nfunction initLogicFlow(container, nodeNumber, edgeNumber) {\n  const width = container.clientWidth;\n  const height = container.clientHeight;\n  const renderData = {\n    nodes: createRandomLFNode(nodeNumber, width, height),\n    edges: createRandomLFEdge(edgeNumber, nodeNumber)\n  };\n  const lf = new LogicFlow({\n    container,\n    tool: {\n      control: false\n    },\n    stopScrollGraph: true,\n    stopZoomGraph: true\n  });\n\n  lf.render(renderData);\n}\n\nfunction initX6(container, nodeNumber, edgeNumber) {\n  const width = container.clientWidth;\n  const height = container.clientHeight;\n  const renderData = {\n    nodes: createRandomX6Node(nodeNumber, width, height),\n    edges: createRandomX6Edge(edgeNumber, nodeNumber)\n  };\n  const graph = new Graph({\n    container\n  });\n  graph.fromJSON(renderData);\n}\n\nexport { initLogicFlow, initX6 };\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}